{"version":3,"sources":["components/featuredInfo/FeaturedInfo.jsx","components/funnel/Component.jsx","pages/home/Bome.jsx","App.jsx","registerServiceWorker.js","index.js"],"names":["FeaturedInfo","renderCustomBarLabel","payload","x","y","width","value","height","fill","textAnchor","dy","className","BarChart","data","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","tickCount","label","angle","position","dx","Tooltip","Legend","Bar","CanvasJSChart","CanvasJSReact","CanvasJS","Component","Bome","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.75541bbb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./featuredInfo.css\";\r\nimport {\r\n  Tooltip,\r\n  BarChart,\r\n  XAxis,\r\n  YAxis,\r\n  Legend,\r\n  CartesianGrid,\r\n  LabelList,\r\n  Bar,\r\n} from \"recharts\";\r\n\r\nconst FeaturedInfo = () => {\r\n\r\n  //cobb neck\r\n  const data = [\r\n\r\n    {\r\n      \"name\": \"Phase 1\",\r\n      \"Total Homes/Businesses to be Passed\": 45,\r\n      \"Customer Service Agreements Received\": 11,\r\n      \"Customers Connected\": 8\r\n  },\r\n  {\r\n      \"name\": \"Phase 2\",\r\n      \"Total Homes/Businesses to be Passed\": 56,\r\n      \"Customer Service Agreements Received\": 36,\r\n      \"Customers Connected\": 30\r\n  },\r\n  {\r\n      \"name\": \"Phase 3\",\r\n      \"Total Homes/Businesses to be Passed\": 130,\r\n      \"Customer Service Agreements Received\": 85,\r\n      \"Customers Connected\": 77\r\n  },\r\n  {\r\n      \"name\": \"Phase 4\",\r\n      \"Total Homes/Businesses to be Passed\": 68,\r\n      \"Customer Service Agreements Received\": 48,\r\n      \"Customers Connected\": 40\r\n  }\r\n]\r\n;\r\n\r\n//nanjemoy data\r\nconst dataa = [\r\n  {\r\n    \"name\": \"Phase 1\",\r\n    \"Total Homes/Businesses to be Passed\": 156,\r\n    \"Customer Service Agreements Received\": 110,\r\n    \"Customers Connected\": 98\r\n},\r\n{\r\n    \"name\": \"Phase 2\",\r\n    \"Total Homes/Businesses to be Passed\": 197,\r\n    \"Customer Service Agreements Received\": 133,\r\n    \"Customers Connected\": 126\r\n},\r\n{\r\n    \"name\": \"Phase 3\",\r\n    \"Total Homes/Businesses to be Passed\": 332,\r\n    \"Customer Service Agreements Received\": 158,\r\n    \"Customers Connected\": 129\r\n},\r\n{\r\n    \"name\": \"Phase 4\",\r\n    \"Total Homes/Businesses to be Passed\": 283,\r\n    \"Customer Service Agreements Received\": 132,\r\n    \"Customers Connected\": 108\r\n},\r\n{\r\n    \"name\": \"Phase 5\",\r\n    \"Total Homes/Businesses to be Passed\": 199,\r\n    \"Customer Service Agreements Received\": 106,\r\n    \"Customers Connected\": 89\r\n}\r\n];\r\nconst renderCustomBarLabel = ({ payload, x, y, width, height, value }) => {\r\n  return <text x={x + width / 2} y={y} fill=\"#4c4c4c\" textAnchor=\"middle\" dy={-1}>{`${value}`}</text>;\r\n};\r\n  return (\r\n    <div className=\"parentDiv\">\r\n      <div className=\"chart\">\r\n        <div>\r\n        <span className=\"chartTitle\">Nanjemoy</span>\r\n      <BarChart \r\n          width={500}\r\n          height={250}\r\n          data={dataa}\r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis tickCount={10} label={{ value: 'Total', angle: -90, position: 'outside', dx:-30}} />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Bar dataKey=\"Total Homes/Businesses to be Passed\"  fill=\"#0078ad\" label={renderCustomBarLabel} />\r\n          <Bar dataKey=\"Customer Service Agreements Received\" fill=\"#4CBB17\" label={renderCustomBarLabel} />\r\n          <Bar dataKey=\"Customers Connected\" fill=\"#efb40f\" label={renderCustomBarLabel} />\r\n        </BarChart>\r\n        </div>\r\n        <div>\r\n          <span className=\"chartTitle\">Cobb Neck</span>\r\n        <BarChart\r\n          width={500}\r\n          height={250}\r\n          data={data}\r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis tickCount={6} label={{ value: 'Total', angle: -90, position: 'outside', dx:-15}} />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Bar dataKey=\"Total Homes/Businesses to be Passed\" fill=\"#0078ad\" label={renderCustomBarLabel} />\r\n          <Bar dataKey=\"Customer Service Agreements Received\" fill=\"#4CBB17\" label={renderCustomBarLabel} />\r\n          <Bar dataKey=\"Customers Connected\" fill=\"#efb40f\" label={renderCustomBarLabel} />\r\n        </BarChart>\r\n        </div>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FeaturedInfo;","/* App.js */\r\nimport React, { Component } from 'react';\r\nimport CanvasJSReact from '@canvasjs/react-charts';\r\n//var CanvasJSReact = require('@canvasjs/react-charts');\r\n \r\nvar CanvasJS = CanvasJSReact.CanvasJS;\r\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\r\nclass App extends Component {\r\n\trender() {\r\n\t\tvar dataPoint;\r\n\t\tvar total;\r\n\t\tconst options = {\r\n\t\t\tanimationEnabled: true,\r\n\t\t\ttitle:{\r\n\t\t\t\ttext: \"Sales Analysis\"\r\n\t\t\t},\r\n\t\t\tdata: [{\r\n\t\t\t\ttype: \"funnel\",\r\n\t\t\t\ttoolTipContent: \"<b>{label}</b>: {y} <b>({percentage}%)</b>\",\r\n\t\t\t\tindexLabelPlacement: \"inside\",\r\n\t\t\t\tindexLabel: \"{label} ({percentage}%)\",\r\n\t\t\t\tdataPoints: [\r\n\t\t\t\t\t{ y: 1400, label: \"Prospects\" },\r\n\t\t\t\t\t{ y: 1212, label: \"Qualified Prospects\" },\r\n\t\t\t\t\t{ y: 1080, label: \"Proposals\" },\r\n\t\t\t\t\t{ y: 665,  label: \"Negotiation\" },\r\n\t\t\t\t\t{ y: 578, label: \"Final Sales\" }\r\n\t\t\t\t]\r\n\t\t\t}]\r\n\t\t}\r\n\t\t//calculate percentage\r\n\t\tdataPoint = options.data[0].dataPoints;\r\n\t\ttotal = dataPoint[0].y;\r\n\t\tfor(var i = 0; i < dataPoint.length; i++) {\r\n\t\t\tif(i == 0) {\r\n\t\t\t\toptions.data[0].dataPoints[i].percentage = 100;\r\n\t\t\t} else {\r\n\t\t\t\toptions.data[0].dataPoints[i].percentage = ((dataPoint[i].y / total) * 100).toFixed(2);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<CanvasJSChart options = {options}\r\n\t\t\t\t\t onRef={ref => this.chart = ref}\r\n\t\t\t\t/>\r\n\t\t\t\t{/*You can get reference to the chart instance as shown above using onRef. This allows you to access all chart properties and methods*/}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default Component;","import React from 'react';\r\nimport \"./home.css\";\r\nimport FeaturedInfo from \"../../components/featuredInfo/FeaturedInfo\";\r\nimport Explanation from '../../components/explanation/Explanation';\r\nimport Component from '../../components/funnel/Component'\r\n\r\nexport default function Bome() {\r\n\r\n    return(\r\n        <div className=\"bome\">\r\n            <FeaturedInfo />\r\n            {/* <Explanation /> */}\r\n        </div>\r\n    )\r\n\r\n}","import React, { Component } from 'react';\nimport \"./App.css\"\nimport Bome from './pages/home/Bome'\nimport Sidebar from './components/sidebar/sidebar'\nimport FeaturedInfo from './components/featuredInfo/FeaturedInfo'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n          <div className=\"container\">\n            {/* <Sidebar /> */}\n            <Bome />\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\n\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}